---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Subnet:
    Description: "Select the Subnets ID for Instance creation "
    Type: "AWS::EC2::Subnet::Id"

  VPCAdminSecurityGroup:
    Description: "Select Admin VPC security groups"
    Type: AWS::EC2::SecurityGroup::Id

  VPCEC2SecurityGroup:
    Description: "Select EC2 VPC security groups"
    Type: AWS::EC2::SecurityGroup::Id

  KeyName:
     Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
     Type: "AWS::EC2::KeyPair::KeyName"

  InstanceType:
      Description: "EC2 instance type"
      Type: String
      Default: "t2.micro"
      AllowedValues:
        - "t1.micro"
        - "t2.micro"
        - "t2.small"

Mappings:
  AWSRegionAMI:
    us-east-1:
      AMI: "ami-b70554c8"

Resources:

  AnsIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"

  AnsInstanceProfile:
    Description: "Profile for Ansible Instance"
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref AnsIAMRole

  AnsibleInstance:
    Description: "Control instance with Ansible"
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [AWSRegionAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref AnsInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref VPCAdminSecurityGroup
            - !Ref VPCEC2SecurityGroup
          SubnetId:
            Ref: Subnet
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash

            set -e

            sudo yum update -y &&
            echo "Yum update completed"
            sudo yum install docker-ce -y
            echo "Docker installed"
            sudo yum install python-pip -y
            echo "python-pip installed"
            sudo pip install ansible
            echo "Ansible installed"
            sudo yum install git -y
            echo  "Git installed"
            sudo pip install boto
            echo "boto installed"
            sudo git clone https://github.com/hdgdink/ansible.git &&
            echo "git repository cloned"
            sudo chmod +x /home/ec2-user/ansible/inventory/ec2.py
            export EC2_INI_PATH=/home/ec2-user/ansible/inventory/ec2.ini
            export ANSIBLE_HOSTS=./inventory/
            export ANSIBLE_CONFIG=/home/ec2-user/ansible/ansible.cfg
            echo "export ANSIBLE_HOSTS=./inventory/" >> /home/ec2-user/.bashrc
            echo "export EC2_INI_PATH=/home/ec2-user/ansible/inventory/ec2.ini" >> /home/ec2-user/.bashrc
            echo "export ANSIBLE_CONFIG=/home/ec2-user/ansible/inventory/ansible.cfg" >> /home/ec2-user/.bashrc
            sudo mv /home/ec2-user/ansible/keys/id_rsa /home/ec2-user/.ssh/
            sudo chmod 700 /home/ec2-user/.ssh/id_rsa
            cat /home/ec2-user/ansible/keys/id_rsa.pub >> /home/ec2-user/.ssh/authorized_keys
            cd /home/ec2-user/ansible/
            ansible-playbook all.yml
      Tags:
        -
          Key: Name
          Value: "Ansible"