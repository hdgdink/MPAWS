---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Subnet:
    Description: "Select the Subnets ID for Instance creation "
    Type: "AWS::EC2::Subnet::Id"

  VPCAdminSecurityGroup:
    Description: "Select Admin VPC security groups"
    Type: AWS::EC2::SecurityGroup::Id

  VPCEC2SecurityGroup:
    Description: "Select EC2 VPC security groups"
    Type: AWS::EC2::SecurityGroup::Id

  KeyName:
     Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
     Type: "AWS::EC2::KeyPair::KeyName"

  InstanceType:
      Description: "EC2 instance type"
      Type: String
      Default: "t2.micro"
      AllowedValues:
        - "t1.micro"
        - "t2.micro"
        - "t2.small"

Mappings:
  AWSRegionAMI:
    us-east-1:
      AMI: "ami-b70554c8"

Resources:

  AnsIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"

  AnsInstanceProfile:
    Description: "Profile for Docker Instance"
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref AnsIAMRole

  DockerInstance:
    Description: "Control instance with Docker"
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [AWSRegionAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref AnsInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref VPCAdminSecurityGroup
            - !Ref VPCEC2SecurityGroup
          SubnetId:
            Ref: Subnet
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash

            set -e

            sudo yum update -y &&
            echo "INFO: Yum update completed"
            sudo yum install ftp://bo.mirror.garr.it/1/slc/centos/7.1.1503/extras/x86_64/Packages/container-selinux-2.9-4.el7.noarch.rpm -y &&
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo yum install docker-ce -y
            echo "INFO: Docker installed"
            sudo usermod -aG docker $(whoami)
            sudo systemctl enable docker.service
            sudo systemctl start docker.service
            echo "INFO: Docker started"
            sudo yum install python-pip -y
            echo "INFO: python-pip installed"
            sudo pip install docker-compose
            sudo yum upgrade python*
            sudo docker pull amazonlinux
            sudo yum install git -y
            echo "INFO: Git installed"

            mkdir -p /home/ec2-user/.ssh
            ssh-keyscan -t rsa github.com > /home/ec2-user/.ssh/known_hosts
            sudo git clone https://github.com/hdgdink/docker.git /home/ec2-user/docker &&
            echo "INFO: git repository cloned"
            sudo chmod 777 /home/ec2-user/docker -R
            cd /home/ec2-user/docker
            echo "INFO: Containers building..."
            sudo docker-compose up -d --build
            echo "INFO: Containers builded..."

      Tags:
        -
          Key: Name
          Value: "Docker"